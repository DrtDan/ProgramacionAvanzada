{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOlzlwmIf+2eYPO2J5g2ovF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DrtDan/ProgramacionAvanzada/blob/main/Naives%20Bayes/An%C3%A1lisis%20de%20Datos%20Aplicables%20al%20Teorema%20de%20Na%C3%AFve%20Bayes\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Análisis de Datos Aplicables al Teorema de Naïve Bayes\n"
      ],
      "metadata": {
        "id": "5-ktR7cBTopy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
        "\n",
        "# Cargar el dataset\n",
        "df = pd.read_csv(\"Naive-Bayes-Classification-Data.csv\")\n",
        "\n",
        "# Ver las primeras filas del dataset\n",
        "print(df.head())\n",
        "\n",
        "# Verificar valores nulos\n",
        "print(\"\\nValores nulos en el dataset:\")\n",
        "print(df.isnull().sum())\n",
        "\n",
        "# Eliminar filas con valores nulos si existen\n",
        "df = df.dropna()\n",
        "\n",
        "# Dividir en variables de entrada (X) y variable de salida (y)\n",
        "X = df[['glucose', 'bloodpressure']]\n",
        "y = df['diabetes']\n",
        "\n",
        "# Normalizar los valores numéricos\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "X = scaler.fit_transform(X)\n",
        "\n",
        "# Separar en conjunto de entrenamiento y prueba\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Crear el modelo Naïve Bayes\n",
        "model = GaussianNB()\n",
        "\n",
        "# Entrenar el modelo\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Hacer predicciones\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Evaluar el modelo\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"Precisión del modelo: {accuracy:.2f}\")\n",
        "\n",
        "# Matriz de confusión\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Greys')\n",
        "plt.xlabel(\"Predicción\")\n",
        "plt.ylabel(\"Real\")\n",
        "plt.title(\"Matriz de Confusión\")\n",
        "plt.show()\n",
        "\n",
        "# Reporte de clasificación\n",
        "print(\"Reporte de Clasificación:\")\n",
        "print(classification_report(y_test, y_pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 883
        },
        "id": "4gFPPUf77yoM",
        "outputId": "eaf1d20a-cd20-4712-b15d-0ada67003819"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   glucose  bloodpressure  diabetes\n",
            "0       40             85         0\n",
            "1       40             92         0\n",
            "2       45             63         1\n",
            "3       45             80         0\n",
            "4       40             73         1\n",
            "\n",
            "Valores nulos en el dataset:\n",
            "glucose          0\n",
            "bloodpressure    0\n",
            "diabetes         0\n",
            "dtype: int64\n",
            "Precisión del modelo: 0.93\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reporte de Clasificación:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.92      0.92      0.92        93\n",
            "           1       0.93      0.93      0.93       106\n",
            "\n",
            "    accuracy                           0.93       199\n",
            "   macro avg       0.93      0.93      0.93       199\n",
            "weighted avg       0.93      0.93      0.93       199\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Análisis de Datos con Naïve Bayes\n",
        "\n",
        "Objetivo\n",
        "El propósito de esta actividad es que los estudiantes busquen, seleccionen y analicen un conjunto de datos en Kaggle o en otra fuente confiable, aplicando el algoritmo de Naïve Bayes para resolver un problema de clasificación. Además, deberán presentar los resultados y conclusiones obtenidas, relacionándolos con la teoría del Teorema de Bayes.\n",
        "\n",
        "1. Investigación del Teorema de Naïve Bayes\n",
        "El Teorema de Bayes describe cómo actualizar la probabilidad de una hipótesis basada en nueva evidencia. El clasificador Naïve Bayes aplica este teorema asumiendo independencia entre las características.\n",
        "\n",
        "Ecuación general:\n",
        "\n",
        "P(A|B) = [P(B|A) P(A)]/P(B)\n",
        "Donde:\n",
        "- P(A|B) es la probabilidad de la hipótesis A dada la evidencia B.\n",
        "- P(B|A) es la probabilidad de observar B si A es cierta.\n",
        "- P(A) es la probabilidad previa de A.\n",
        "- P(B) es la probabilidad de la evidencia B.\n",
        "\n",
        "Casos de Uso Reales\n",
        "- Clasificación de correos electrónicos (spam/no spam)\n",
        "- Diagnóstico médico (detección de enfermedades)\n",
        "- Análisis de sentimientos en redes sociales\n",
        "\n",
        "\n",
        "\n",
        "2. Búsqueda y Selección de Datos\n",
        "Se utilizó un dataset con datos médicos para predecir la presencia de diabetes. Este dataset es adecuado porque:\n",
        "- Contiene una variable de salida binaria (0: no diabetes, 1: diabetes).\n",
        "- Tiene múltiples características numéricas.\n",
        "- Es un problema donde la probabilidad juega un papel clave.\n",
        "\n",
        "3. Preprocesamiento de los Datos\n",
        "- Se cargó el dataset en Python utilizando `pandas`.\n",
        "- Se verificó la presencia de valores nulos.\n",
        "- Se seleccionaron las variables `glucose` y `bloodpressure` como características relevantes.\n",
        "- Se dividió el dataset en conjunto de entrenamiento (80%) y prueba (20%).\n",
        "\n",
        "4. Análisis de Resultados\n",
        "Resultados obtenidos:\n",
        "- Precisión del modelo:93%\n",
        "- Matriz de confusión:\n",
        "  - Verdaderos positivos: 99\n",
        "  - Verdaderos negativos: 86\n",
        "  - Falsos positivos: 7\n",
        "  - Falsos negativos: 7\n",
        "\n",
        "Reporte de Clasificación:\n",
        "- Clase 0: Precisión = 0.92, Recall = 0.92\n",
        "- Clase 1: Precisión = 0.93, Recall = 0.93\n",
        "- Promedio ponderado de precisión: 0.93\n"
      ],
      "metadata": {
        "id": "0qll84ytZ4IC"
      }
    }
  ]
}